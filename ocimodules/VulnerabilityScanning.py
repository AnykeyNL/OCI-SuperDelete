import oci
import time

WaitRefresh = 15


##############################################
# DeleteScanResults
##############################################
def DeleteScanResults(config, Compartments):
    object = oci.vulnerability_scanning.VulnerabilityScanningClient(config)

    print("Deleting all Host Agent Scan Results")
    for Compartment in Compartments:
        items = oci.pagination.list_call_get_all_results(object.list_host_agent_scan_results, compartment_id=Compartment.id).data
        for item in items:
            print("- {}".format(item.display_name))
            try:
                object.delete_host_agent_scan_result(host_agent_scan_result_id=item.id)
            except Exception as e:
                print("error trying delete to Host Agent rules: {} - {}".format(item.display_name, str(e)))

    print("Deleting all Host Port Scan Results")
    for Compartment in Compartments:
        items = oci.pagination.list_call_get_all_results(object.list_host_port_scan_results, compartment_id=Compartment.id).data
        for item in items:
            print("- {}".format(item.display_name))
            try:
                object.delete_host_port_scan_result(host_port_scan_result_id=item.id)
            except Exception as e:
                print("error trying to delete Host Port Scan rules: {} - {}".format(item.display_name, str(e)))

    # print("Deleting all Host Endpoint Protection Scan Results")
    # for Compartment in Compartments:
    #     items = oci.pagination.list_call_get_all_results(object.list_host_endpoint_protection_scan_results, compartment_id=Compartment.id).data
    #     for item in items:
    #         print("- {}".format(item.display_name))
    #         object.delete_host_endpoint_protection_scan_result(host_endpoint_protection_scan_result_id=item.id)

    print("Deleting all CIS Scan Results")
    for Compartment in Compartments:
        items = oci.pagination.list_call_get_all_results(object.list_host_cis_benchmark_scan_results, compartment_id=Compartment.id).data
        for item in items:
            print("- {}".format(item.display_name))
            try:
                object.delete_host_cis_benchmark_scan_result(host_cis_benchmark_scan_result_id=item.id)
            except Exception as e:
                print("error trying to delete CSI Scan results: {} - {}".format(item.display_name, str(e)))

    print("Deleting all Container Scan Results")
    for Compartment in Compartments:
        items = oci.pagination.list_call_get_all_results(object.list_container_scan_results, compartment_id=Compartment.id).data
        for item in items:
            print("- {}".format(item.display_name))
            try:
                object.delete_container_scan_result(container_scan_result_id=item.id)
            except Exception as e:
                print("error trying to delete Container Scan Results: {} - {}".format(item.display_name, str(e)))

    print("All ScanResults Objects deleted!")


##############################################
# DeleteRecipes
##############################################
def DeleteRecipes(config, Compartments):
    object = oci.vulnerability_scanning.VulnerabilityScanningClient(config)

    print("Deleting all Host Scan Recipes")
    for Compartment in Compartments:
        items = oci.pagination.list_call_get_all_results(object.list_host_scan_recipes, compartment_id=Compartment.id).data
        for item in items:
            print("- {}".format(item.display_name))
            try:
                object.delete_host_scan_recipe(host_scan_recipe_id=item.id)
            except Exception as e:
                print("error trying to delete host scan recipes: {} - {}".format(item.display_name, str(e)))

    print("Deleting all Container Scan Recipes")
    for Compartment in Compartments:
        items = oci.pagination.list_call_get_all_results(object.list_container_scan_recipes, compartment_id=Compartment.id).data
        for item in items:
            print("- {}".format(item.display_name))
            try:
                object.delete_container_scan_recipe(container_scan_recipe_id=item.id)
            except Exception as e:
                print("error trying to delete Container Scan Recipes: {} - {}".format(item.display_name, str(e)))

    print("All Recipes Objects deleted!")


##############################################
# DeleteTargets
##############################################
def DeleteTargets(config, Compartments):
    AllItems = []
    object = oci.vulnerability_scanning.VulnerabilityScanningClient(config)

    print("Getting all Host Scan Targets objects")
    for Compartment in Compartments:
        items = oci.pagination.list_call_get_all_results(object.list_host_scan_targets, compartment_id=Compartment.id).data
        for item in items:
            if (item.lifecycle_state != "DELETED"):
                AllItems.append(item)
                print("- {} - {}".format(item.display_name, item.lifecycle_state))

    itemsPresent = True

    while itemsPresent:
        count = 0
        for item in AllItems:
            try:
                itemstatus = object.get_host_scan_target(host_scan_target_id=item.id).data
                if itemstatus.lifecycle_state != "DELETED":
                    if itemstatus.lifecycle_state != "DELETING":
                        try:
                            print("Deleting: {}".format(itemstatus.display_name))
                            object.delete_host_scan_target(host_scan_target_id=itemstatus.id)
                        except Exception:
                            print("error trying to delete: {}".format(itemstatus.display_name))
                    else:
                        print("{} = {}".format(itemstatus.display_name, itemstatus.lifecycle_state))
                    count = count + 1
            except Exception:
                print("error deleting {}, probably already deleted".format(item.display_name))
        if count > 0:
            print("Waiting for all Objects to be deleted...")
            time.sleep(WaitRefresh)
        else:
            itemsPresent = False

    AllItems = []
    print("Getting all Container Scan Targets objects")
    for Compartment in Compartments:
        items = oci.pagination.list_call_get_all_results(object.list_container_scan_targets,
                                                         compartment_id=Compartment.id).data
        for item in items:
            if (item.lifecycle_state != "DELETED"):
                AllItems.append(item)
                print("- {} - {}".format(item.display_name, item.lifecycle_state))

    itemsPresent = True

    while itemsPresent:
        count = 0
        for item in AllItems:
            try:
                itemstatus = object.get_container_scan_target(container_scan_target_id=item.id).data
                if itemstatus.lifecycle_state != "DELETED":
                    if itemstatus.lifecycle_state != "DELETING":
                        try:
                            print("Deleting: {}".format(itemstatus.display_name))
                            object.delete_container_scan_target(container_scan_target_id=itemstatus.id)
                        except Exception:
                            print("error trying to delete: {}".format(itemstatus.display_name))
                    else:
                        print("{} = {}".format(itemstatus.display_name, itemstatus.lifecycle_state))
                    count = count + 1
            except Exception:
                print("error deleting {}, probably already deleted".format(item.display_name))
        if count > 0:
            print("Waiting for all Objects to be deleted...")
            time.sleep(WaitRefresh)
        else:
            itemsPresent = False

    print("All Targets Objects deleted!")
